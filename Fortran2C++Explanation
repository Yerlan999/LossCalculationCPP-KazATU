*** Общие сведения о конфигурации программы на С++***

1) Открывыет только .xlsx формат с назанием в латинице.
    Пример: "Promzona.xlsx". Необходимо будет переформатировать
    (сохранить как версия 2007-2019) и переименовать.
2) Необходимо переименовать (назвать) листы в файле
    с ["3.1. Фаза А", "3.1. Фаза А (продолжение)", и.т.д.]
    на ["Sheet1", "Sheet2", "Sheet3", "Sheet4", "Sheet5", "Sheet6"]
    соответственно.
3) Раместить Excel документ рядом с программой.



*** Структура Excel файлов с данными о Напряжении и Токе ***

Один файл содержит:
1) 6 листов.
2) Первые два листа содержат данные о Напряжении и Токе первой Фазы соответственно.
   Далее по аналогии. Итого 3 Фазы.
2) Нечетные листы содержат 98 столбцов. Амплитуда и Фаза по Напряжению на каждую гармонику.
   [UM, FUM]. Итого 49 Гармоник.
3) Четные листы содержат 106 столбцов. 98 столбцов из них это Амплитуда и Фаза по Току на каждую гармонику.
   [AIM, FIM]. Остальные 8 столбцов = [knsu, knsi, rmsu, rmsi, funu, funi, fu, fi] соответсвенно.
4) Количество строк у каждой подстанции разное. Примерно ~500. Это количество измерении прибором.


* "Help" > "Search" > "Query" - для справок по синтаксису в среде разработки


*** ПреКод ***

Юнит 1 - 1. Длина и период
Юнит 2 - 2.4 Вводимые общие данные
Юнит 4 - 1. Подстанция и ее присоединения
Юнит 5 - Введенные общие данные
Юнит 6 - Введенные параметры режима
Юнит 8 - Результаты расчета
Юнит 10 - EPURAU
Юнит 11 - EPURAI
Юнит 12 - R11
Юнит 30 - PPP
Юнит 31 - PPP1
Юнит 32 - PPP2
Юнит 33 - PPP3
Юнит 34 - PPP4
Юнит 35 - PPP5
Юнит 36 - PPP6
Юнит 37 - PPP7
Юнит 38 - PPP8

Юнит 101 - 3.1. Фаза А
Юнит 111 - 3.1. Фаза А (продолжение)
Юнит 102 - 3.2. Фаза В
Юнит 122 - 3.2. Фаза В (продолжение)
Юнит 103 - 3.3. Фаза С
Юнит 133 - 3.3. Фаза С (продолжение)

*** Форматы ***

    Дескрипторы:
        I - целочисленное
        A - символ
        F - цисло с плавующей точкой
        E - экспоненциальное число
        Х - пропуск (пробел)

    r[Дескриптор]w
    где:
        r - повторение чтения
        w - ширина чтения


    2   FORMAT(6F20.15)
    2   FORMAT(6F20.15)
    3   FORMAT(80X)
    3   FORMAT(80X)
    6   FORMAT(20F15.10)
    6   FORMAT(20F15.10)
    7   FORMAT(8I6)
    7   FORMAT(8I6)
    8   FORMAT(24F20.15)
    8   FORMAT(24F20.15)
    9   FORMAT(20x,24F20.15)
    9   FORMAT(20x,24F20.15)

   70   FORMAT(I4,2I10,F12.1,5I8)
   77   FORMAT('******************************************************')
   77   FORMAT('******************************************************')
   78   FORMAT('FFU2')
   78   FORMAT('FFU2')
   79   FORMAT('FFI2')
   79   FORMAT('FFI2')
   99   format(24f25.14)
   99   format(24f25.10)

  191   FORMAT(32I2)
  195   FORMAT(16F10.5)
  196   FORMAT(60E25.10)
  196   FORMAT(120E25.10)
  197   FORMAT(16E25.10)
  197   FORMAT(16E25.10)
  198   FORMAT(16F25.10)
  198   FORMAT(16F25.10)
  199   format(16f25.10)
  199   format(8f25.10)

  215   FORMAT(8F35.10)
  296   FORMAT(16F25.23)
  296   FORMAT(16F25.23)
  298   FORMAT(16F25.10)
  299   FORMAT(64E25.10)

  333   FORMAT(5I3)
  334   FORMAT(15A1)
  335   FORMAT(13A1)
  336   FORMAT(204E9.2)
  337   FORMAT(204(E8.2,1X))

  991   FORMAT('BLOCK 1 RUNS')
  991   FORMAT('BLOCK 1 RUNS')
  992   FORMAT('BLOCK 2 RUNS')
  992   FORMAT('BLOCK 2 RUNS')
  993   FORMAT(I3,I3,I3)
  993   FORMAT(I3,I3,I3)
  995   FORMAT('CALL RASCHET')
  995   FORMAT('CALL RASCHET')
  998   FORMAT(5X, 5I10)
  998   FORMAT(5X, 5I10)
  999   FORMAT(5X, F16.8)
  999   FORMAT(5X, F16.8)


*** Пояснение по синтаксису Фортрана 77?***

INTEGER name(10) - integer 4-и байтный (по умолчанию) с 10-ю элементами (массив!?)
INTEGER*8(2,4) name - integer 8-и байтный.

DIMENSION name(length) - массив name с длинной в length

COMPLEX name(array_length)*size_in_bytes - массив
COMPLEX name*size_in_bytes - переменная

Цикловой отчет на Фортране начинается с 1 (единцы)!!!


*** Объяснение (пояснение) самого Кода на Фортране 77? ***

1) Подключение библиотеки(модуля) MSIMSL
2) Создание массивов AAH(15) BBH(13).
   ААН хранит в себе текст из 15 символов. Название подствнции "Промзона       "
   ВВН хранит в себе текст из 13 символов. Название присоединения "ПЗ-Пог1      "
3)


*** Трейсер переменных на Фортране ***

AAH = "Промзона       "
BBH = "ПЗ-Пог1      "

NN1 = 1 = pris_num
N1 = N3 = 560 = num_recs // количество измерении в Excel файле
N2 = 1

K1 = K3 = 50 = num_harms
K2 = 1

pi=3.14159265358979
AL = complex(-0.5, 0.866025)
FF=50

MM = 5 // дина линии (км)
MPR = 3 // количество проводов
MTR = 1 // количество тросов
DT = 2.5 // интервал измерении (мин)
MT = 5 // количество заземлении троса

*** Global variables (should be passed by refence) ***
COMMON MM,M,M1,MT,M10,M20,PR,K1,K2,K3,N1,N2,N3,MPR,MTR,MMT
COMMON MM,M,M1,MT,M10,M20,PR,K1,K2,K3,N1,N2,N3,MPR,MTR,MMT

UM = Амплитуда Напряжения
FUM = Фаза Напряжения
AIM = Амплитуда Тока
FIM = Фаза Тока
knsu = THD Напряжения
knsi = THD Тока
rmsu = RMS Напряжения
rmsi = RMS Тока
funu = Амплитуда Основной Гармоники Напряжения
funi = Амплитуда Основной Гармоники Тока
fu = Фаза Основной Гармоники Напряжения
fi = Фаза Основной Гармоники Тока


*** Здесь происходит разбор отдельных частей кода на Фортран ***

Chekc Type of Variable = typeid(var).name()
                        OR call_value.typeAsString()


Hint: int marr[10][10] = {}; 2-dim array filled with zeros


complex<float> matrix[3][50][560] = {};
               matrix[фазы][гармоники][кол.измерен] !!! Наоборот


WorkSheet.rows(first, last);
WorkSheet.rows(last);
WorkSheet.rows();

debug_file << value.typeAsString() << " | " << value << endl;



in Sheets 1, 3, 5:
    UM, FUM [49 times]
in Sheets 2, 4, 6:
    AIM, FIM [49 times] ... knsu, knsi, rmsu, rmsi, funu, funi, fu, fi



//for (auto& value : std::deque<XLCellValue>(row.values())) {
    // for every VALUE in ROW...
    //std::debug_file << value.typeAsString() << " | " << value << endl;
}

//double cell_value = wks.cell("a2").value();
//debug_file << cell_value << endl;

//using Eigen::MatrixXcf;

//debug_file << "Row number: " << rows_counter << endl;
//debug_file << "Harmonic number: " << h << " || Amp index: " << amp << " , Pha index: " << pha << " ||" << endl;
//debug_file << "Sheet number: " << sheets_counter << " || Phase number: " << phase_number << endl;
//debug_file << " " << endl;

//debug_file << " *********** Before conversion *********** " << endl;
//debug_file << "Amp cell value: " << cell.at(amp) << " || Type of: " << cell.at(amp).typeAsString() << endl;
//debug_file << "Pha cell value: " << cell.at(pha) << " || Type of: " << cell.at(pha).typeAsString() << endl;
//debug_file << " " << endl;

MatrixXcf my_matrix;
my_matrix = MatrixXcf::Zero(3, 3);
my_matrix(1, 2) = mycomplex;

Matrix <complex<float>, 3, 3 > my_matrix;
my_matrix.setZero();
my_matrix(1, 2) = mycomplex;


for (auto& cell_value : row.cells())
{
    //debug_file << cell_value << endl;
    //std::debug_file << "Worksheet: " << worksheet_name << " || Row: " << cell_value.cellReference().row() << " || Column: " << cell_value.cellReference().column() << " || Value: " << cell_value.value() << endl;
}

//int row_number = row.rowNumber();


[0] = 1
[1] = 562
[2] = 1123
[3] = 1685
[4] = 2246
[5] = 2809
[6] = last row number


1 [0] 1    +1
  [1] 562  -1

2 [1] 562  +1
  [2] 1123 -1

3 [2] 1123 +1
  [3] 1685 -1

4 [3] 1685 +1
  [4] 2246 -1

5 [4] 2246 +1
  [5] 2809 -1

6 [5] 2809 +1
  [ ] rows_count <- append(last_row_number)

debug_file << index << " || " << amp << " , " << pha << " ||" << endl;

insert_gap();
debug_file << "******************** " << worksheet_name << " ********************" << endl;
debug_file << worksheet_name << "'s Columns count: " << w_columns_count << endl;
debug_file << worksheet_name << "'s Rows count: " << w_rows_count << endl;
insert_gap();


debug_file << "Row number: " << rows_counter << endl;
debug_file << "Harmonic number: " << h << " || Amp index: " << amp << " , Pha index: " << pha << " ||" << endl;
debug_file << "Sheet number: " << sheets_counter << " || Phase number: " << phase_number << endl;
debug_file << " " << endl;

debug_file << "Phase number: " << phase_number << " Rows counter: " << rows_counter << " Last column index: " << w_columns_count - 1 << endl;


.get<float>()


sheets_counter = [1, 2, 3, 4, 5, 6]
                 |  0 | | 1 | | 2 |

phase =  0  1  2
sheets = 1, 3, 5
sheets = 2, 4, 6

when even = (sheets_counter-2)/2
when odd = sheet-1, sheet-2, sheet-3, ...



knsu[phase_number][rows_counter] = float(cell.at(w_columns_count-8));
knsi[phase_number][rows_counter] = float(cell.at(w_columns_count-7));
rmsu[phase_number][rows_counter] = float(cell.at(w_columns_count-6));
rmsi[phase_number][rows_counter] = float(cell.at(w_columns_count-5));
funu[phase_number][rows_counter] = float(cell.at(w_columns_count-4));
funi[phase_number][rows_counter] = float(cell.at(w_columns_count-3));
fu[phase_number][rows_counter] = float(cell.at(w_columns_count-2));
fi[phase_number][rows_counter] = float(cell.at(w_columns_count-1));

int phase = 0;
debug_file << knsu[phase][i] << " | " << knsi[phase][i] << " | " << rmsu[phase][i] << " | " << rmsi[phase][i] << " | " << funu[phase][i] << " | " << funi[phase][i] << " | " << fu[phase][i] << " | " << fi[phase][i] << endl;
//debug_file << "Value of row (" << i+2 << "): " << UM[0][1][i] << endl;


// TESTING CREATED MATRICES
int phase = 0;
for (int i = 0; i < 560; i++)
{
    //debug_file << "Value of row (" << i+2 << "): " << UM[0][1][i] << endl;
    debug_file << knsu[phase][i] << " | " << knsi[phase][i] << " | " << rmsu[phase][i] << " | " << rmsi[phase][i] << " | " << funu[phase][i] << " | " << funi[phase][i] << " | " << fu[phase][i] << " | " << fi[phase][i] << endl;

}


for (int i = 0; i < w_columns_count-(num_harms * 2); i++)
{
    try { main_harm[i][phase_number][rows_counter] = cell.at(num_harms*2 + i).get<float>(); }
    catch (XLValueTypeError) { main_harm[i][phase_number][rows_counter] = (float)cell.at(num_harms*2 + i).get<int>(); }
}




// ****************************************************** # DEBUGGING # ******************************************************

// TESTING CREATED MATRICES
int phase = 0;
for (int i = 0; i < 560; i++)
{
    //debug_file << "Value of row (" << i+2 << "): " << UM[0][1][i] << endl;
    debug_file << main_harm[0][phase][i] << " || "
        << main_harm[1][phase][i] << " || "
        << main_harm[2][phase][i] << " || "
        << main_harm[3][phase][i] << " || "
        << main_harm[4][phase][i] << " || "
        << main_harm[5][phase][i] << " || "
        << main_harm[6][phase][i] << " || "
        << main_harm[7][phase][i] << endl;

}

insert_end_separator();

auto degub_stop = high_resolution_clock::now();
auto debug_duration = duration_cast<seconds>(degub_stop - start);
debug_file << "Took to execute: " << debug_duration.count() << " seconds." << std::endl;
std::cout << "Execution has just finished!" << std::endl;

return 0;
// TESTING CREATED MATRICES

// ****************************************************** # DEBUGGING # ******************************************************




int MM = 5; int MPR = 3; int MTR = 1; float DT = 2.5; int MT = 5;


std::complex<float> test = std::complex<float>(10.0, 2.0);
cout << test << endl;
return 0;

C @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ DEBUGGING TOOL @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
C   PRINT *,AIXM(I)
C   WRITE(777,*)AIX(I)
C @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ DEBUGGING TOOL @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Keep in mind: K = [1-50], N = [1-560] in FORTRAN

            Matrix[700][50][3] in FORTRAN
            Matrix[3][50][700] in C++





